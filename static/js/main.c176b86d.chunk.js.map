{"version":3,"sources":["constants.ts","redux/slices/recipeSlice.ts","hooks.ts","components/Sidebar/index.tsx","components/Home/index.tsx","components/NewRecipe/index.tsx","components/RecipeList/Recipe/EditRecipe.tsx","components/RecipeList/Recipe/index.tsx","components/RecipeList/index.tsx","components/Router/index.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["Page","initialState","recipes","currentPage","HOME","openId","currentId","displayId","recipeSlice","createSlice","name","reducers","createRecipe","state","action","payload","id","updateRecipe","map","recipe","deleteRecipe","filter","deleteAllRecipes","navigateTo","openRecipe","closeRecipe","setDisplay","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","Sidebar","dispatch","currPage","SidebarContainer","Title","Button","onClick","ADD","RECIPE_LIST","RemoveButton","RecipeListHeader","length","RecipeListContainer","RecipeButton","key","styled","div","Home","Container","SubTitle","Text","NewRecipe","useState","setName","ingredients","setIngredients","onChange","e","target","value","placeholder","Ingredients","CancelButton","input","textarea","EditRecipe","newName","setNewName","newIngredients","setNewIngredients","handleCancel","InputLabel","ButtonContainer","LargeButton","SmallButton","Recipe","isOpen","Header","SmallRemoveButton","IngredientsHeader","IngredientsText","RecipeList","filteredRecipes","routerMap","Router","ContentContainer","MainContainer","App","Boolean","window","location","hostname","match","store","configureStore","reducer","recipeSliceReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c176b86d.chunk.js","sourcesContent":["export enum Page {\n  HOME,\n  ADD,\n  RECIPE_LIST,\n}\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RecipeProps } from \"../../components/RecipeList/Recipe\";\nimport { Page } from \"../../constants\";\n\n// Define the state of the slice as an object\nexport interface RecipeState {\n  recipes: RecipeProps[];\n  currentPage: Page;\n  openId: number | null;\n  currentId: number;\n  displayId: number | null;\n}\n\n// Define an initial state\nconst initialState: RecipeState = {\n  recipes: [],\n  currentPage: Page.HOME,\n  openId: null,\n  currentId: 1,\n  displayId: null,\n};\n\n// Create a slice containing the configuration of the state\n// and the reducers functions\nconst recipeSlice = createSlice({\n  name: \"recipe\",\n  initialState,\n  reducers: {\n    createRecipe(\n      state,\n      action: PayloadAction<Pick<RecipeProps, \"name\" | \"ingredients\">>\n    ) {\n      state.recipes = [...state.recipes, { ...action.payload, id: state.currentId }];\n      state.currentId++;\n    },\n    updateRecipe(state, action: PayloadAction<RecipeProps>) {\n      const id = action.payload.id;\n      state.recipes = state.recipes.map((recipe) =>\n        recipe.id === id ? action.payload : recipe\n      );\n    },\n    deleteRecipe(state, action: PayloadAction<number>) {\n      const id = action.payload;\n      state.recipes = state.recipes.filter((recipe) => recipe.id !== id);\n    },\n    deleteAllRecipes(state) {\n      state.recipes = [];\n    },\n    navigateTo(state, action: PayloadAction<Page>) {\n      state.currentPage = action.payload;\n    },\n    openRecipe(state, action: PayloadAction<number>) {\n      state.openId = action.payload;\n    },\n    closeRecipe(state) {\n      state.openId = null;\n    },\n    setDisplay(state, action: PayloadAction<number | null>) {\n      state.displayId = action.payload;\n    },\n  },\n});\n\n// Export each reducers function defined in createSlice\nexport const {\n  createRecipe,\n  updateRecipe,\n  deleteRecipe,\n  deleteAllRecipes,\n  navigateTo,\n  openRecipe,\n  closeRecipe,\n  setDisplay,\n} = recipeSlice.actions;\n\n// Export default the slice reducer\nexport default recipeSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport { RootState, AppDispatch } from \"./redux/store\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { navigateTo, deleteAllRecipes, setDisplay } from \"../../redux/slices/recipeSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { Page } from \"../../constants\";\n\nconst Sidebar = ({}) => {\n  const dispatch = useAppDispatch();\n  const currPage = useAppSelector((state) => state.recipe.currentPage);\n  const recipes = useAppSelector((state) => state.recipe.recipes);\n  const displayId = useAppSelector((state) => state.recipe.displayId);\n\n  const handleGoToAdd = () => {\n    dispatch(navigateTo(Page.ADD));\n  };\n\n  const handleGoToRecipeList = () => {\n    dispatch(\n      navigateTo(\n        currPage === Page.RECIPE_LIST && !displayId ? Page.HOME : Page.RECIPE_LIST\n      )\n    );\n    dispatch(setDisplay(null));\n  };\n\n  const handleRemoveAll = () => {\n    dispatch(deleteAllRecipes());\n  };\n\n  const handleRecipeClick = (id: number) => {\n    dispatch(setDisplay(id));\n    dispatch(navigateTo(Page.RECIPE_LIST));\n  };\n\n  return (\n    <SidebarContainer>\n      <Title>FCC Recipe Box</Title>\n      <Button onClick={handleGoToAdd}>Add a New Recipe</Button>\n      <Button onClick={handleGoToRecipeList}>\n        {currPage === Page.RECIPE_LIST && !displayId\n          ? \"Hide All Recipes\"\n          : \"Show All Recipes\"}\n      </Button>\n      <RemoveButton onClick={handleRemoveAll}> Remove All Recipes </RemoveButton>\n      <RecipeListHeader>\n        {recipes.length ? \"Recipe List:\" : \"The List is Empty\"}\n      </RecipeListHeader>\n      <RecipeListContainer>\n        {recipes.map((recipe) => (\n          <RecipeButton\n            key={recipe.id}\n            onClick={(): void => handleRecipeClick(recipe.id)}>\n            {recipe.name}\n          </RecipeButton>\n        ))}{\" \"}\n      </RecipeListContainer>\n    </SidebarContainer>\n  );\n};\n\nconst SidebarContainer = styled.div`\n  width: 299px;\n  position: fixed;\n  background: purple;\n  border: 1px solid black;\n  height: 100vh;\n  text-align: center;\n  font-size: 24px;\n`;\n\nconst Title = styled.div`\n  margin-top: 30px;\n  margin-bottom: 20px;\n`;\n\nconst Button = styled.div`\n  width: 270px;\n  height: 45px;\n  border: 1px solid black;\n  background: darkgreen;\n  margin: 5px auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  &:hover {\n    background: green;\n  }\n`;\n\nconst RemoveButton = styled(Button)`\n  background: red;\n  &:hover {\n    background: darkred;\n  }\n`;\n\nconst RecipeButton = styled(Button)`\n  background: yellow;\n  &:hover {\n    background: orange;\n  }\n`;\n\nconst RecipeListHeader = styled.div`\n  margin-top: 50px;\n`;\n\nconst RecipeListContainer = styled.div`\n  margin-top: 10px;\n`;\n\nexport { Sidebar };\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Home = ({}) => {\n  return (\n    <Container>\n      <Title>This is a Recipe App</Title>\n      <SubTitle>You can record your recipes here</SubTitle>\n      <Text>\n        All your recipes are stored in your browsers local storage and any changes you\n        make will remain saved as long as you continue to access this page from the same\n        browser.\n      </Text>\n      <Text>Built by Deniro JR</Text>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin: auto;\n  text-align: center;\n  width: 750px;\n  vertical-align: top;\n`;\n\nconst Title = styled.div`\n  padding-top: 100px;\n  font-weight: 600;\n  font-size: 48px;\n`;\n\nconst SubTitle = styled.div`\n  padding-top: 30px;\n  font-weight: 500;\n  font-size: 36px;\n`;\n\nconst Text = styled.div`\n  padding-top: 30px;\n  font-size: 24px;\n`;\n\nexport { Home };\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { navigateTo, createRecipe } from \"../../redux/slices/recipeSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\nimport { Page } from \"../../constants\";\n\nconst NewRecipe = () => {\n  const dispatch = useAppDispatch();\n  const [name, setName] = useState(\"\");\n  const [ingredients, setIngredients] = useState(\"\");\n\n  const handleSubmit = (): void => {\n    dispatch(\n      createRecipe({\n        name,\n        ingredients,\n      })\n    );\n  };\n\n  const handleCancel = (): void => {\n    setName(\"\");\n    setIngredients(\"\");\n    dispatch(navigateTo(Page.HOME));\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setName(e.target.value);\n  };\n\n  const handleIngredientsChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    setIngredients(e.target.value);\n  };\n\n  return (\n    <Container>\n      <Title onChange={handleNameChange} value={name} placeholder='Recipe' />\n      <Ingredients\n        onChange={handleIngredientsChange}\n        value={ingredients}\n        placeholder='Ingredients'\n      />\n      <Button onClick={handleSubmit}>Submit Recipe</Button>\n      <CancelButton onClick={handleCancel}>Cancel</CancelButton>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin: auto;\n  text-align: center;\n  width: 530px;\n  padding-top: 30px;\n`;\n\nconst Title = styled.input`\n  height: 60px;\n  font-size: 22px;\n  display: block;\n  width: 520px;\n  padding: 0px 6px;\n  border: 1px solid black;\n`;\n\nconst Ingredients = styled.textarea`\n  resize: none;\n  height: 170px;\n  font-size: 22px;\n  display: block;\n  width: 520px;\n  margin-top: 15px;\n  border: 1px solid black;\n  padding: 6px;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\",\n    \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n`;\n\nconst Button = styled.div`\n  font-size: 24px;\n  width: 350px;\n  height: 60px;\n  border: 1px solid black;\n  background: darkgreen;\n  margin: 15px auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  &:hover {\n    background: green;\n  }\n`;\n\nconst CancelButton = styled(Button)`\n  background: red;\n  &:hover {\n    background: darkred;\n  }\n`;\n\nconst Text = styled.div`\n  padding-top: 30px;\n  font-size: 24px;\n`;\n\nexport { NewRecipe };\n","import React, { useState } from \"react\";\nimport { RecipeProps } from \".\";\nimport styled from \"styled-components\";\nimport { updateRecipe, closeRecipe } from \"../../../redux/slices/recipeSlice\";\nimport { useAppDispatch } from \"../../../hooks\";\n\ntype EditRecipeProps = Pick<RecipeProps, \"name\" | \"id\" | \"ingredients\">;\n\nconst EditRecipe: React.FC<EditRecipeProps> = ({\n  id,\n  name,\n  ingredients,\n}: EditRecipeProps) => {\n  const [newName, setNewName] = useState(name);\n  const [newIngredients, setNewIngredients] = useState(ingredients);\n\n  const dispatch = useAppDispatch();\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setNewName(e.target.value);\n  };\n\n  const handleIngredientsChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    setNewIngredients(e.target.value);\n  };\n\n  const handleCancel = () => {\n    //dispatch the handle Close\n    dispatch(closeRecipe());\n  };\n\n  const handleSubmit = (): void => {\n    dispatch(\n      updateRecipe({\n        id,\n        name: newName,\n        ingredients: newIngredients,\n      })\n    );\n    handleCancel();\n    //dispatch handle close\n  };\n\n  return (\n    <Container>\n      <InputLabel>Edit Title:</InputLabel>\n      <Title value={newName} onChange={handleNameChange} />\n      <InputLabel>Edit Ingredients:</InputLabel>\n      <Ingredients value={newIngredients} onChange={handleIngredientsChange} />\n      <ButtonContainer>\n        <LargeButton onClick={handleSubmit}> Submit Edit </LargeButton>\n        <CancelButton onClick={handleCancel}> Cancel Edit </CancelButton>\n      </ButtonContainer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  border-radius: 5px;\n  padding: 10px;\n  padding-bottom: 20px;\n  background: black;\n  margin-top: 20px;\n`;\n\nconst InputLabel = styled.div`\n  color: white;\n  font-size: 22px;\n  margin-top: 20px;\n`;\n\nconst Title = styled.input`\n  margin-top: 20px;\n  height: 50px;\n  font-size: 22px;\n  display: block;\n  width: 520px;\n  padding: 0px 6px;\n  border: 1px solid black;\n`;\n\nconst Ingredients = styled.textarea`\n  resize: none;\n  height: 170px;\n  font-size: 22px;\n  display: block;\n  width: 875px;\n  margin-top: 20px;\n  border: 1px solid black;\n  padding: 6px;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\",\n    \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n`;\n\nconst SmallButton = styled.div`\n  font-size: 16px;\n  width: 150px;\n  height: 32px;\n  border: 1px solid black;\n  background: mediumpurple;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0px 5px;\n  cursor: pointer;\n  &:hover {\n    background: purple;\n  }\n`;\n\nconst LargeButton = styled(SmallButton)`\n  width: 200px;\n  height: 50px;\n`;\n\nconst CancelButton = styled(LargeButton)`\n  background: red;\n  &:hover {\n    background: darkred;\n  }\n  margin-left: 10px;\n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 10px;\n  display: flex;\n`;\n\nexport { EditRecipe };\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { EditRecipe } from \"./EditRecipe\";\nimport { openRecipe, deleteRecipe } from \"../../../redux/slices/recipeSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../../hooks\";\n\nexport interface RecipeProps {\n  id: number;\n  name: string;\n  ingredients: string;\n}\n\nconst Recipe = ({ id, name, ingredients }: RecipeProps) => {\n  const dispatch = useAppDispatch();\n  const openId = useAppSelector((state) => state.recipe.openId);\n  const isOpen = id === openId;\n\n  const handleEdit = () => {\n    dispatch(openRecipe(id));\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteRecipe(id));\n  };\n  return (\n    <Container>\n      <Header>\n        <div>{name}</div>\n        <ButtonContainer>\n          <SmallButton onClick={handleEdit}>Edit This Recipe</SmallButton>\n          <SmallRemoveButton onClick={handleDelete}>Remove This Recipe</SmallRemoveButton>\n        </ButtonContainer>\n      </Header>\n      <IngredientsHeader> Ingredients: </IngredientsHeader>\n      <IngredientsText> {ingredients} </IngredientsText>\n      {isOpen && <EditRecipe id={id} name={name} ingredients={ingredients} />}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin: auto;\n  margin-top: 30px;\n  width: 980px;\n  border-radius: 5px;\n  background: yellow;\n  width: 90%;\n  padding: 10px 10px;\n  font-size: 18px;\n  text-align: left;\n`;\n\nconst Header = styled.div`\n  font-weight: 500;\n  width: 100%;\n  height: 55px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: auto;\n  border-bottom: 1px solid black;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n`;\n\nconst SmallButton = styled.div`\n  font-size: 16px;\n  width: 150px;\n  height: 32px;\n  border: 1px solid black;\n  background: mediumpurple;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0px 5px;\n  cursor: pointer;\n  &:hover {\n    background: purple;\n  }\n`;\n\nconst SmallRemoveButton = styled(SmallButton)`\n  background: red;\n  &:hover {\n    background: darkred;\n  }\n`;\n\nconst IngredientsHeader = styled.div`\n  margin-top: 20px;\n  font-weight: 600px;\n  font-size: 18px;\n`;\n\nconst IngredientsText = styled.div`\n  padding-top: 10px;\n  padding-left: 10px;\n  font-size: 14px;\n`;\n\nexport { Recipe };\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { useAppSelector } from \"../../hooks\";\nimport { Recipe } from \"./Recipe\";\n\nconst RecipeList = ({}) => {\n  const recipes = useAppSelector((state) => state.recipe.recipes);\n  const displayId = useAppSelector((state) => state.recipe.displayId);\n\n  const filteredRecipes = displayId\n    ? recipes.filter((recipe) => recipe.id === displayId)\n    : recipes;\n\n  return (\n    <Container>\n      {filteredRecipes.map((recipe) => (\n        <Recipe key={recipe.id} {...recipe} />\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin: auto;\n  text-align: center;\n  padding-top: 1px;\n`;\n\nexport { RecipeList };\n","import React from \"react\";\nimport { Home } from \"../Home\";\nimport { NewRecipe } from \"../NewRecipe\";\nimport { RecipeList } from \"../RecipeList\";\nimport { useAppSelector } from \"../../hooks\";\nimport { Page } from \"../../constants\";\n\n//depending on what page we are on, render it from here\n\nconst routerMap = {\n  [Page.HOME]: <Home />,\n  [Page.ADD]: <NewRecipe />,\n  [Page.RECIPE_LIST]: <RecipeList />,\n};\n\nconst Router = ({}) => {\n  const currPage = useAppSelector((state) => state.recipe.currentPage);\n  return routerMap[currPage];\n};\n\nexport { Router };\n","import React from \"react\";\nimport { Sidebar } from \"./components/Sidebar\";\nimport { Router } from \"./components/Router\";\n\nimport styled from \"styled-components\";\n\nconst App = () => {\n  return (\n    <MainContainer>\n      <Sidebar />\n      <ContentContainer>\n        <Router />\n      </ContentContainer>\n    </MainContainer>\n  );\n};\n\nconst ContentContainer = styled.div`\n  margin-left: 300px;\n  min-height: 100vh;\n  width: calc(100% - 300px);\n  background: blue;\n  vertical-align: top;\n`;\n\nconst MainContainer = styled.div`\n  vertical-align: top;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\n\n// Import the previously created search slice\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport recipeSliceReducer, { RecipeState } from \"./slices/recipeSlice\";\n\n// Create the store, adding the search slice to it\nexport const store = configureStore({\n  reducer: {\n    recipe: recipeSliceReducer,\n  },\n});\n\n// Export some helper types used to improve type-checking\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}